plugins {
    id "com.android.application"
    id "kotlin-android"
    // Firebase and Google services
    id 'com.google.gms.google-services'
    // The Flutter Gradle Plugin must be applied after Android and Kotlin Gradle plugins
    id "dev.flutter.flutter-gradle-plugin"
}


// Load local.properties
def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localProperties.load(new FileInputStream(localPropertiesFile))
}

// Retrieve flutter version code and name, with default values if null
def flutterVersionCode = localProperties.getProperty('flutter.versionCode') ?: '1'
def flutterVersionName = localProperties.getProperty('flutter.versionName') ?: '1.0'

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if(keystorePropertiesFile.exists()){
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}


def dartEnvironmentVariables = []
if (project.hasProperty('dart-defines')) {
    dartEnvironmentVariables = project.property('dart-defines')
        .split(',')
        .collectEntries { entry ->
            def pair = new String(entry.decodeBase64(), 'UTF-8').split('=')
            [(pair.first()): pair.last()]
        }
}

android {
    namespace = "com.example.product_management"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = "25.1.8937393"

    defaultConfig {
        resValue "string", "GOOGLE_API_KEY", dartEnvironmentVariables.GOOGLE_API_KEY
        applicationId = "com.example.productmanagement"
        minSdkVersion 23
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    signingConfigs{
        release{
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            // minifyEnabled false // set to true if you want code obfuscation and shrinking
            // shrinkResources false // set to true if you want to remove unused resources
            signingConfig signingConfigs.release
        }
    }
}

dependencies {
    // Firebase BoM ensures compatibility between Firebase libraries
    implementation platform('com.google.firebase:firebase-bom:33.4.0')

    // Firebase Authentication and Firestore
    implementation 'com.google.firebase:firebase-auth'
    implementation 'com.google.firebase:firebase-firestore'
}

flutter {
    source = "../.."
}
